generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DB_URL")
}

enum UserRole {
    ADMIN @map("ADMIN")
    GUEST @map("GUEST")
    USER  @map("USER")

    @@map("user_roles")
}

enum ProviderNameEnums {
    GOOGLE   @map("GOOGLE")
    FACEBOOK @map("FACEBOOK")

    @@map("provider_name_enums")
}

model User {
    id        String   @id @default(uuid()) @map("id") @db.Uuid()
    firstName String?  @map("first_name") @db.VarChar(100)
    lastName  String?  @map("last_name") @db.VarChar(100)
    role      UserRole @map("role")
    email     String?  @unique @map("email") @db.VarChar(100)
    isValid   Boolean  @map("is_valid") @db.Boolean()
    password  String?  @map("password") @db.VarChar(100)
    avatar    String?  @map("avatar") @db.VarChar(100)

    subjects     UserSubject[]
    userFolder   UserFolder[]
    providerName ProviderNameEnums? @map("provider_name")
    providerId   String?            @unique @map("provider_id") @db.VarChar(250)

    createdAt DateTime  @map("created_at") @db.Timestamp()
    updatedAt DateTime? @map("updated_at") @db.Timestamp()
    removedAt DateTime? @map("removed_at") @db.Timestamp()

    @@map("users")
}

model Subject {
    id          String  @id @default(uuid()) @map("subject_id") @db.Uuid()
    subjectName String  @map("subject_name") @db.VarChar(100)
    description String? @map("description") @db.VarChar(255)
    semester    String  @map("semester") @db.VarChar(100)

    users UserSubject[]

    createdAt DateTime? @default(now()) @db.Timestamp()
    updatedAt DateTime? @updatedAt @db.Timestamp()
}

model UserSubject {
    userId    String  @map("user_id") @db.Uuid()
    subjectId String  @map("subject_id") @db.Uuid()
    user      User    @relation(fields: [userId], references: [id])
    subject   Subject @relation(fields: [subjectId], references: [id])
    folder    Folder?

    @@id([userId, subjectId])
}

model Folder {
    id               String       @id @default(uuid()) @map("Folder_id") @db.Uuid()
    name             String       @map("folder_name") @db.VarChar(100)
    parent_folder    Folder?      @relation("FolderToFolder", fields: [parent_folder_id], references: [id])
    parent_folder_id String?      @db.Uuid()
    folders          Folder[]     @relation("FolderToFolder")
    docs             Doc[]
    userFolder       UserFolder[]
    userSubject      UserSubject  @relation(fields: [userId, subjectId], references: [userId, subjectId])
    userId           String       @db.Uuid()
    subjectId        String       @db.Uuid()
    created_at       DateTime?    @default(now()) @db.Timestamp()
    updated_at       DateTime?    @updatedAt @db.Timestamp()

    @@unique([userId, subjectId])
}

model Doc {
    id        String    @id @default(uuid()) @map("Doc_id") @db.Uuid()
    folder_id String    @db.Uuid()
    folder    Folder    @relation(fields: [folder_id], references: [id])
    content   String?   @map("content") @db.VarChar(255)
    createdAt DateTime? @default(now()) @db.Timestamp()
    updatedAt DateTime? @updatedAt @db.Timestamp()
}

model UserFolder {
    userId   String @map("user_id") @db.Uuid()
    folderId String @map("folder_id") @db.Uuid()
    user     User   @relation(fields: [userId], references: [id])
    folder   Folder @relation(fields: [folderId], references: [id])

    @@id([userId, folderId])
}
