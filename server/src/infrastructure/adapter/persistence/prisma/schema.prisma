datasource db {
    provider = "postgresql"
    url      = "postgresql://postgres:123456@localhost:5433/mydb?schema=public"
}

generator client {
    provider = "prisma-client-js"
}

enum UserRole {
    ADMIN @map("ADMIN")
    GUEST @map("GUEST")
    USER  @map("USER")

    @@map("user_roles")
}

enum AuthProviderName {
    GOOGLE   @map("GOOGLE")
    FACEBOOK @map("FACEBOOK")

    @@map("auth_provider_names")
}

enum MeetingType {
    PUBLIC  @map("PUBLIC")
    PRIVATE @map("PRIVATE")

    @@map("meeting_types")
}

enum ParticipantRole {
    HOST        @map("HOST")
    OBSERVER    @map("OBSERVER")
    PARTICIPANT @map("PARTICIPANT")
    ANONYMOUSE  @map("ANONYMOUSE")

    @@map("participant_roles")
}

model User {
    id        String   @id @default(uuid()) @map("id") @db.Uuid()
    firstName String?  @map("first_name") @db.VarChar(100)
    lastName  String?  @map("last_name") @db.VarChar(100)
    role      UserRole @map("role")
    email     String?  @unique @map("email") @db.VarChar(100)
    isValid   Boolean  @map("is_valid") @db.Boolean()
    password  String?  @map("password") @db.VarChar(100)
    avatar    String?  @map("avatar") @db.VarChar(100)

    authProviderName AuthProviderName? @map("provider_name")
    providerId       String?           @unique @map("provider_id") @db.VarChar(250)

    createdAt DateTime  @map("created_at") @db.Timestamp()
    updatedAt DateTime? @map("updated_at") @db.Timestamp()
    removedAt DateTime? @map("removed_at") @db.Timestamp()

    Participant Participant[]
    UserFolder  UserFolder[]
    UserMeeting UserMeeting[]

    @@map("users")
}

model Meeting {
    id          String      @id @default(uuid()) @map("id") @db.Uuid()
    startTime   DateTime    @map("start_time") @db.Timestamp()
    endTime     DateTime?   @map("end_time") @db.Timestamp()
    title       String?     @map("title") @db.VarChar(250)
    description String?     @map("description") @db.VarChar(250)
    type        MeetingType @map("type")

    Participant Participant[]

    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp()
    updatedAt DateTime? @map("updated_at") @db.Timestamp()
    removedAt DateTime? @map("removed_at") @db.Timestamp()

    @@map("meetings")
}

model Participant {
    id        String  @id @default(uuid()) @map("id") @db.Uuid()
    name      String  @map("name") @db.VarChar(100)
    userId    String? @map("user_id") @db.Uuid()
    meetingId String  @map("meeting_id") @db.Uuid()

    role ParticipantRole @map("role")

    user    User?    @relation(fields: [userId], references: [id])
    meeting Meeting? @relation(fields: [meetingId], references: [id], onDelete: Cascade)

    createdAt DateTime  @map("created_at") @db.Timestamp()
    updatedAt DateTime? @map("updated_at") @db.Timestamp()
    removedAt DateTime? @map("removed_at") @db.Timestamp()

    @@map("participants")
}

model Folder {
    id               String       @id @default(uuid()) @map("Folder_id") @db.Uuid()
    name             String       @map("folder_name") @db.VarChar(100)
    parent_folder    Folder?      @relation("ParentFolderToFolder", fields: [parent_folder_id], references: [id])
    parent_folder_id String?      @db.Uuid()
    child_folders    Folder[]     @relation("ParentFolderToFolder")
    user_meeting_id  String?      @map("user_meeting_id") @db.Uuid()
    user_meeting     UserMeeting? @relation(fields: [user_meeting_id], references: [id])
    files            File[]
    created_at       DateTime?    @default(now()) @db.Timestamp()
    updated_at       DateTime?    @updatedAt @db.Timestamp()
    UserFolder       UserFolder[]

    @@unique([parent_folder_id, name]) // Một thư mục cha không thể có nhiều thư mục con có cùng tên
}

model UserMeeting {
    id        String @id @default(uuid()) @map("id") @db.Uuid()
    userId    String @map("user_id") @db.Uuid()
    meetingId String @map("meeting_id")
    user      User   @relation(fields: [userId], references: [id])

    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp()
    updatedAt DateTime? @map("updated_at") @db.Timestamp()
    removedAt DateTime? @map("removed_at") @db.Timestamp()
    Folder    Folder[]

    @@map("user_meetings")
}

model File {
    id        String    @id @default(uuid()) @map("File_id") @db.Uuid()
    name      String    @map("file_name") @db.VarChar(100)
    folder_id String    @db.Uuid()
    folder    Folder    @relation(fields: [folder_id], references: [id])
    path      String    @map("path") @db.VarChar(255)
    type      String    @map("file_type") @db.VarChar(255)
    createdAt DateTime  @default(now()) @db.Timestamp()
    updatedAt DateTime? @updatedAt @db.Timestamp()
}

model UserFolder {
    id       String @id @default(uuid()) @map("id") @db.Uuid()
    userId   String @map("user_id") @db.Uuid()
    folderId String @map("folder_id") @db.Uuid()
    user     User   @relation(fields: [userId], references: [id])
    folder   Folder @relation(fields: [folderId], references: [id])
}
