datasource db {
    provider = "postgresql"
    url      = env("DB_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum UserRole {
    ADMIN @map("ADMIN")
    GUEST @map("GUEST")
    USER  @map("USER")

    @@map("user_roles")
}

enum ProviderNameEnums {
    GOOGLE   @map("GOOGLE")
    FACEBOOK @map("FACEBOOK")

    @@map("provider_name_enums")
}

enum MeetingStatusEnums {
    PUBLIC  @map("PUBLIC")
    PRIVATE @map("PRIVATE")

    @@map("meeting_status_enums")
}

enum ParticipantRole {
    HOST        @map("HOST")
    OBSERVER    @map("OBSERVER")
    PARTICIPANT @map("PARTICIPANT")

    @@map("participant_roles")
}

model User {
    id        String   @id @default(uuid()) @map("id") @db.Uuid()
    firstName String?  @map("first_name") @db.VarChar(100)
    lastName  String?  @map("last_name") @db.VarChar(100)
    role      UserRole @map("role")
    email     String?  @unique @map("email") @db.VarChar(100)
    isValid   Boolean  @map("is_valid") @db.Boolean()
    password  String?  @map("password") @db.VarChar(100)
    avatar    String?  @map("avatar") @db.VarChar(100)

    providerName ProviderNameEnums? @map("provider_name")
    providerId   String?            @unique @map("provider_id") @db.VarChar(250)

    createdAt   DateTime      @map("created_at") @db.Timestamp()
    updatedAt   DateTime?     @map("updated_at") @db.Timestamp()
    removedAt   DateTime?     @map("removed_at") @db.Timestamp()
    Participant Participant[]

    @@map("users")
}

model Meeting {
    id          String             @id @default(uuid()) @map("id") @db.Uuid()
    startTime   DateTime           @map("start_time") @db.Timestamp()
    endTime     DateTime?          @map("end_time") @db.Timestamp()
    title       String?            @map("title") @db.VarChar(250)
    description String?            @map("description") @db.VarChar(250)
    status      MeetingStatusEnums @map("status")

    createdAt   DateTime      @default(now()) @map("created_at") @db.Timestamp()
    updatedAt   DateTime?     @map("updated_at") @db.Timestamp()
    removedAt   DateTime?     @map("removed_at") @db.Timestamp()
    Participant Participant[]

    @@map("meetings")
}

model Participant {
    id        String  @id @default(uuid()) @map("id") @db.Uuid()
    userId    String? @map("user_id") @db.Uuid()
    meetingId String  @map("meeting_id") @db.Uuid()

    name String?         @map("name") @db.VarChar(100)
    role ParticipantRole @map("role")

    user    User?    @relation(fields: [userId], references: [id])
    meeting Meeting? @relation(fields: [meetingId], references: [id])

    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp()
    updatedAt DateTime? @map("updated_at") @db.Timestamp()
    removedAt DateTime? @map("removed_at") @db.Timestamp()

    @@map("participants")
}
