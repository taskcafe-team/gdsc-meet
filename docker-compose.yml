version: "3.9"
networks:
  proxy-network:
    driver: bridge
  server-network:
    driver: bridge

volumes:
  db-data: {}
  file-data: {}
  cache-data: {}

services:
  reverse-proxy:
    image: traefik:v2.4
    container_name: traefik
    ports:
      - 443:443
      - 80:80
      - 8080:8080
      - 5000:5000
      - 7880:7880
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yaml:/etc/traefik/traefik.yaml
      - ./traefik/gdscmeet.key:/config/gdscmeet.key
      - ./traefik/gdscmeet.crt:/config/gdscmeet.crt
    networks:
      - proxy-network
    command:
      - --api.insecure=true
      - --api.dashboard=true
      - --api.debug=true
      - --log.LEVEL=DEBUG
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=proxy-network
      - --providers.file.filename=/config/dynamic.yml
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entryPoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls=true
      - --entryPoints.webapi.address=:5000
      - --entryPoints.webrtcapi.address=:7880

  db:
    container_name: db-postgres
    image: postgres:12
    restart: always
    ports:
      - 5433:5432
    networks:
      - server-network
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123456
      - POSTGRES_DB=postgres

  # client:
  #   container_name: reactjs
  #   build:
  #     context: ./client
  #     dockerfile: Dockerfile
  #   restart: always
  #   networks:
  #     - proxy-network
  #   labels:
  #     - traefik.enable=true
  #     - traefik.docker.network=proxy-network
  #     - traefik.http.routers.client.rule=Host(`gdsc-meet.me-dangnhatminh.id.vn`)
  #     - traefik.http.routers.client.tls=true
  #     - traefik.http.routers.client.entrypoints=websecure
  #     - traefik.http.services.client.loadbalancer.server.port=3000

  server:
    container_name: server-nestjs
    build:
      context: ./server
      dockerfile: Dockerfile
    restart: always
    networks:
      - proxy-network
      - server-network
    volumes:
      - file-data:/app/infrastructure/adapter/persistence/data
    depends_on:
      - db
      - web_rtc
      - cache_store
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy-network
      - traefik.http.routers.server.tls=true
      - traefik.http.routers.server.rule=Host(`gdsc-meet.me-dangnhatminh.id.vn`)
      - traefik.http.routers.server.entrypoints=webapi
      - traefik.http.services.server.loadbalancer.server.port=5000

  web_rtc:
    container_name: livekit
    image: livekit/livekit-server:v1.5
    command: --config /etc/livekit.yaml
    restart: always
    volumes:
      - ./livekit/livekit.yaml:/etc/livekit.yaml
    networks:
      - server-network
      - proxy-network
    depends_on:
      - cache_store
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy-network
      - traefik.http.routers.web_rtc.tls=true
      - traefik.http.routers.web_rtc.rule=Host(`gdsc-meet.me-dangnhatminh.id.vn`)
      - traefik.http.routers.web_rtc.entrypoints=webrtcapi
      - traefik.http.services.web_rtc.loadbalancer.server.port=7880

  cache_store:
    container_name: redis
    image: redis:7
    restart: always
    ports:
      - 6379:6379
    command: redis-server --save 20 1 --loglevel warning --requirepass mypass
    volumes:
      - cache-data:/data
    networks:
      - server-network
